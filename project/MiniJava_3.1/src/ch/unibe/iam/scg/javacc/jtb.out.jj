/* Generated by JTB 1.4.9 */
/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
JDK_VERSION = "1.5";
  static = false;
}

PARSER_BEGIN(MiniJavaImpl)
package ch.unibe.iam.scg.javacc;

import ch.unibe.iam.scg.minijava.MiniJava;
import ch.unibe.iam.scg.javacc.syntaxtree.*;


public class MiniJavaImpl implements MiniJava {}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token tok) {
    final NodeToken node = new NodeToken(tok.image.intern(), tok.kind, tok.beginLine, tok.beginColumn, tok.endLine, tok.endColumn);
    if (tok.specialToken == null)
      return node;
    Token t = tok;
    int nbt = 0;
    while (t.specialToken != null) {
      t = t.specialToken;
      nbt++;
    }
    final java.util.ArrayList<NodeToken> temp = new java.util.ArrayList<NodeToken>(nbt);
    t = tok;
    while (t.specialToken != null) {
      t = t.specialToken;
      temp.add(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
    }
    for (int i = nbt - 1; i >= 0; --i)
      node.addSpecial(temp.get(i));
    // node.trimSpecials();
    return node;
  }
}

PARSER_END(MiniJavaImpl)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

// weird stuff
TOKEN :
{
  < LENGTH_FIELD_NAME : "length" >
| < MAIN_METHOD_NAME : "main" >
| < PRINT_METHOD : "System.out.println" >
}

// operators
TOKEN :
{
  < UNARY_OPERATOR : "!" >
| < BINARY_OPERATOR : ( "&&"| ">"| "+"| "-"| "*"| "<"| "==" ) >
}

// separatorsTOKEN :
{
  < BRACE_LEFT : "{" >
| < BRACE_RIGHT : "}" >
| < BRACKET_LEFT : "[" >
| < BRACKET_RIGHT : "]" >
| < PARENTHESIS_LEFT : "(" >
| < PARENTHESIS_RIGHT : ")" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < DOT : "." >
| < EQUALS_SIGN : "=" >
}

// reserved words
TOKEN :
{
  < CLASS : "class" >
| < PUBLIC_MODIFIER : "public" >
| < STATIC_MODIFIER : "static" >
| < EXTENDS : "extends" >
| < RETURN : "return" >
| < IF : "if" >
| < ELSE : "else" >
| < WHILE : "while" >
| < NEW : "new" >
}

// types
TOKEN :
{
  < VOID_TYPE : "void" >
| < STRING_TYPE : "String" >
| < INT_TYPE : "int" >
| < BOOLEAN_TYPE : "boolean" >
}

// pseudo-variablesTOKEN :
{
  < THIS : "this" >
}

// literals
TOKEN :
{
  < TRUE : "true" >
| < FALSE : "false" >
| < INTEGER_LITERAL : ( ["1"-"9"] ) ( ["0"-"9"] )*| "0" >
}

// identifier
TOKEN :
{
  < IDENTIFIER : <LETTER> ( <LETTER>| <DIGIT>| <UNDERSCORE> )* >
| < #LETTER : ["a"-"z", "A"-"Z"] >
| < #DIGIT : ["0"-"9"] >
| < #UNDERSCORE : "_" >
}

Goal Goal() :
{
  // --- JTB generated node declarations ---
  MainClass n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  ClassDeclaration n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n0 = MainClass()
  (
    n2 = ClassDeclaration()
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  n4 = < EOF >
  {
    n4.beginColumn++;
    n4.endColumn++;
    { n3 = JTBToolkit.makeNodeToken(n4); }
  }
  { return new Goal(n0, n1, n3); }
}

MainClass MainClass() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  MainMethodDeclaration n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = < CLASS >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Identifier()
  n4 = < BRACE_LEFT >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  n5 = MainMethodDeclaration()
  n7 = < BRACE_RIGHT >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  { return new MainClass(n0, n2, n3, n5, n6); }
}

MainMethodDeclaration MainMethodDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  Identifier n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeOptional n21 = new NodeOptional();
  Statement n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
}
{
  n1 = < PUBLIC_MODIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < STATIC_MODIFIER >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < VOID_TYPE >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = < MAIN_METHOD_NAME >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  n9 = < PARENTHESIS_LEFT >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  n11 = < STRING_TYPE >
  { n10 = JTBToolkit.makeNodeToken(n11); }
  n13 = < BRACKET_LEFT >
  { n12 = JTBToolkit.makeNodeToken(n13); }
  n15 = < BRACKET_RIGHT >
  { n14 = JTBToolkit.makeNodeToken(n15); }
  n16 = Identifier()
  n18 = < PARENTHESIS_RIGHT >
  { n17 = JTBToolkit.makeNodeToken(n18); }
  n20 = < BRACE_LEFT >
  { n19 = JTBToolkit.makeNodeToken(n20); }
  (
    n22 = Statement()
    { n21.addNode(n22); }
  )?
  n24 = < BRACE_RIGHT >
  { n23 = JTBToolkit.makeNodeToken(n24); }
  { return new MainMethodDeclaration(n0, n2, n4, n6, n8, n10, n12, n14, n16, n17, n19, n21, n23); }
}

ClassDeclaration ClassDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Identifier n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeListOptional n10 = new NodeListOptional();
  VarDeclaration n11 = null;
  NodeListOptional n12 = new NodeListOptional();
  MethodDeclaration n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
}
{
  n1 = < CLASS >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Identifier()
  (
    { n4 = new NodeSequence(2); }
    n6 = < EXTENDS >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n4.addNode(n5); }
    n7 = Identifier()
    { n4.addNode(n7); }
    { n3.addNode(n4); }
  )?
  n9 = < BRACE_LEFT >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  (
    n11 = VarDeclaration()
    { n10.addNode(n11); }
  )*
  { n10.nodes.trimToSize(); }
  (
    n13 = MethodDeclaration()
    { n12.addNode(n13); }
  )*
  { n12.nodes.trimToSize(); }
  n15 = < BRACE_RIGHT >
  { n14 = JTBToolkit.makeNodeToken(n15); }
  { return new ClassDeclaration(n0, n2, n3, n8, n10, n12, n14); }
}

VarDeclaration VarDeclaration() :
{
  // --- JTB generated node declarations ---
  TypedDeclaration n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
}
{
  n0 = TypedDeclaration()
  n2 = < SEMICOLON >
  { n1 = JTBToolkit.makeNodeToken(n2); }
  { return new VarDeclaration(n0, n1); }
}

MethodDeclaration MethodDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Type n2 = null;
  Identifier n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeSequence n7 = null;
  ParameterDeclaration n8 = null;
  NodeListOptional n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  ParameterDeclaration n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeListOptional n18 = new NodeListOptional();
  VarDeclaration n19 = null;
  NodeListOptional n20 = new NodeListOptional();
  Statement n21 = null;
  NodeOptional n22 = new NodeOptional();
  NodeSequence n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  Expression n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
}
{
  n1 = < PUBLIC_MODIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Type()
  n3 = Identifier()
  n5 = < PARENTHESIS_LEFT >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  (
    { n9 = new NodeListOptional(); }
    { n7 = new NodeSequence(2); }
    n8 = ParameterDeclaration()
    { n7.addNode(n8); }
    (
      { n10 = new NodeSequence(2); }
      n12 = < COMMA >
      { n11 = JTBToolkit.makeNodeToken(n12); }
      { n10.addNode(n11); }
      n13 = ParameterDeclaration()
      { n10.addNode(n13); }
      { n9.addNode(n10); }
    )*
    { n9.nodes.trimToSize(); }
    { n7.addNode(n9); }
    { n6.addNode(n7); }
  )?
  n15 = < PARENTHESIS_RIGHT >
  { n14 = JTBToolkit.makeNodeToken(n15); }
  n17 = < BRACE_LEFT >
  { n16 = JTBToolkit.makeNodeToken(n17); }
  (
    LOOKAHEAD( 2 )
    n19 = VarDeclaration()
    { n18.addNode(n19); }
  )*
  { n18.nodes.trimToSize(); }
  (
    n21 = Statement()
    { n20.addNode(n21); }
  )*
  { n20.nodes.trimToSize(); }
  (
    { n23 = new NodeSequence(3); }
    n25 = < RETURN >
    { n24 = JTBToolkit.makeNodeToken(n25); }
    { n23.addNode(n24); }
    n26 = Expression()
    { n23.addNode(n26); }
    n28 = < SEMICOLON >
    { n27 = JTBToolkit.makeNodeToken(n28); }
    { n23.addNode(n27); }
    { n22.addNode(n23); }
  )?
  n30 = < BRACE_RIGHT >
  { n29 = JTBToolkit.makeNodeToken(n30); }
  { return new MethodDeclaration(n0, n2, n3, n4, n6, n14, n16, n18, n20, n22, n29); }
}

ParameterDeclaration ParameterDeclaration() :
{
  // --- JTB generated node declarations ---
  TypedDeclaration n0 = null;
}
{
  n0 = TypedDeclaration()
  { return new ParameterDeclaration(n0); }
}

TypedDeclaration TypedDeclaration() :
{
  // --- JTB generated node declarations ---
  Type n0 = null;
  Identifier n1 = null;
}
{
  n0 = Type()
  n1 = Identifier()
  { return new TypedDeclaration(n0, n1); }
}

Type Type() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  IntArrayType n1 = null;
  IntType n2 = null;
  BooleanType n3 = null;
  VoidType n4 = null;
  Identifier n5 = null;
}
{
  (
    LOOKAHEAD( 2 )
    n1 = IntArrayType()
    { n0 = new NodeChoice(n1, 0, 5); }
  |
    n2 = IntType()
    { n0 = new NodeChoice(n2, 1, 5); }
  |
    n3 = BooleanType()
    { n0 = new NodeChoice(n3, 2, 5); }
  |
    n4 = VoidType()
    { n0 = new NodeChoice(n4, 3, 5); }
  |
    n5 = Identifier()
    { n0 = new NodeChoice(n5, 4, 5); }
  )
  { return new Type(n0); }
}

Statement Statement() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  BlockStatement n1 = null;
  IfStatement n2 = null;
  WhileStatement n3 = null;
  PrintStatement n4 = null;
  AssignmentStatement n5 = null;
}
{
  (
    n1 = BlockStatement()
    { n0 = new NodeChoice(n1, 0, 5); }
  |
    n2 = IfStatement()
    { n0 = new NodeChoice(n2, 1, 5); }
  |
    n3 = WhileStatement()
    { n0 = new NodeChoice(n3, 2, 5); }
  |
    n4 = PrintStatement()
    { n0 = new NodeChoice(n4, 3, 5); }
  |
    n5 = AssignmentStatement()
    { n0 = new NodeChoice(n5, 4, 5); }
  )
  { return new Statement(n0); }
}

BlockStatement BlockStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  Statement n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n1 = < BRACE_LEFT >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    n3 = Statement()
    { n2.addNode(n3); }
  )*
  { n2.nodes.trimToSize(); }
  n5 = < BRACE_RIGHT >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  { return new BlockStatement(n0, n2, n4); }
}

IfStatement IfStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Statement n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  Statement n10 = null;
}
{
  n1 = < IF >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_LEFT >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Expression()
  n6 = < PARENTHESIS_RIGHT >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n7 = Statement()
  n9 = < ELSE >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  n10 = Statement()
  { return new IfStatement(n0, n2, n4, n5, n7, n8, n10); }
}

WhileStatement WhileStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Statement n7 = null;
}
{
  n1 = < WHILE >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_LEFT >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Expression()
  n6 = < PARENTHESIS_RIGHT >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n7 = Statement()
  { return new WhileStatement(n0, n2, n4, n5, n7); }
}

PrintStatement PrintStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n1 = < PRINT_METHOD >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < PARENTHESIS_LEFT >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Expression()
  n6 = < PARENTHESIS_RIGHT >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n8 = < SEMICOLON >
  { n7 = JTBToolkit.makeNodeToken(n8); }
  { return new PrintStatement(n0, n2, n4, n5, n7); }
}

AssignmentStatement AssignmentStatement() :
{
  // --- JTB generated node declarations ---
  Assignee n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  Expression n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n0 = Assignee()
  n2 = < EQUALS_SIGN >
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = Expression()
  n5 = < SEMICOLON >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  { return new AssignmentStatement(n0, n1, n3, n4); }
}

Assignee Assignee() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  AssignableArrayAccess n1 = null;
  Identifier n2 = null;
}
{
  (
    LOOKAHEAD( 2 )
    n1 = AssignableArrayAccess()
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n2 = Identifier()
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new Assignee(n0); }
}

AssignableArrayAccess AssignableArrayAccess() :
{
  // --- JTB generated node declarations ---
  Identifier n0 = null;
  ArrayAccess n1 = null;
}
{
  n0 = Identifier()
  n1 = ArrayAccess()
  { return new AssignableArrayAccess(n0, n1); }
}

ArrayAccess ArrayAccess() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Expression n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n1 = < BRACKET_LEFT >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Expression()
  n4 = < BRACKET_RIGHT >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new ArrayAccess(n0, n2, n3); }
}

Expression Expression() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  ObjectInstantiationExpression n2 = null;
  ExpressionPrime n3 = null;
  NodeSequence n4 = null;
  UnaryOperator n5 = null;
  Expression n6 = null;
  ExpressionPrime n7 = null;
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  Expression n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  ExpressionPrime n14 = null;
  NodeSequence n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  ExpressionPrime n18 = null;
  NodeSequence n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  ExpressionPrime n22 = null;
  NodeSequence n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  ExpressionPrime n26 = null;
  NodeSequence n27 = null;
  NodeToken n28 = null;
  Token n29 = null;
  ExpressionPrime n30 = null;
  NodeSequence n31 = null;
  Identifier n32 = null;
  ExpressionPrime n33 = null;
}
{
  (
    { n1 = new NodeSequence(2); }
    n2 = ObjectInstantiationExpression()
    { n1.addNode(n2); }
    n3 = ExpressionPrime()
    { n1.addNode(n3); }
    { n0 = new NodeChoice(n1, 0, 8); }
  |
    { n4 = new NodeSequence(3); }
    n5 = UnaryOperator()
    { n4.addNode(n5); }
    n6 = Expression()
    { n4.addNode(n6); }
    n7 = ExpressionPrime()
    { n4.addNode(n7); }
    { n0 = new NodeChoice(n4, 1, 8); }
  |
    { n8 = new NodeSequence(4); }
    n10 = < PARENTHESIS_LEFT >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n8.addNode(n9); }
    n11 = Expression()
    { n8.addNode(n11); }
    n13 = < PARENTHESIS_RIGHT >
    { n12 = JTBToolkit.makeNodeToken(n13); }
    { n8.addNode(n12); }
    n14 = ExpressionPrime()
    { n8.addNode(n14); }
    { n0 = new NodeChoice(n8, 2, 8); }
  |
    { n15 = new NodeSequence(2); }
    n17 = < INTEGER_LITERAL >
    { n16 = JTBToolkit.makeNodeToken(n17); }
    { n15.addNode(n16); }
    n18 = ExpressionPrime()
    { n15.addNode(n18); }
    { n0 = new NodeChoice(n15, 3, 8); }
  |
    { n19 = new NodeSequence(2); }
    n21 = < TRUE >
    { n20 = JTBToolkit.makeNodeToken(n21); }
    { n19.addNode(n20); }
    n22 = ExpressionPrime()
    { n19.addNode(n22); }
    { n0 = new NodeChoice(n19, 4, 8); }
  |
    { n23 = new NodeSequence(2); }
    n25 = < FALSE >
    { n24 = JTBToolkit.makeNodeToken(n25); }
    { n23.addNode(n24); }
    n26 = ExpressionPrime()
    { n23.addNode(n26); }
    { n0 = new NodeChoice(n23, 5, 8); }
  |
    { n27 = new NodeSequence(2); }
    n29 = < THIS >
    { n28 = JTBToolkit.makeNodeToken(n29); }
    { n27.addNode(n28); }
    n30 = ExpressionPrime()
    { n27.addNode(n30); }
    { n0 = new NodeChoice(n27, 6, 8); }
  |
    { n31 = new NodeSequence(2); }
    n32 = Identifier()
    { n31.addNode(n32); }
    n33 = ExpressionPrime()
    { n31.addNode(n33); }
    { n0 = new NodeChoice(n31, 7, 8); }
  )
  { return new Expression(n0); }
}

ObjectInstantiationExpression ObjectInstantiationExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ConstructorCall n2 = null;
}
{
  n1 = < NEW >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = ConstructorCall()
  { return new ObjectInstantiationExpression(n0, n2); }
}

ConstructorCall ConstructorCall() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  ClassConstructorCall n1 = null;
  IntArrayConstructorCall n2 = null;
}
{
  (
    n1 = ClassConstructorCall()
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n2 = IntArrayConstructorCall()
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new ConstructorCall(n0); }
}

ClassConstructorCall ClassConstructorCall() :
{
  // --- JTB generated node declarations ---
  Identifier n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n0 = Identifier()
  n2 = < PARENTHESIS_LEFT >
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n4 = < PARENTHESIS_RIGHT >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new ClassConstructorCall(n0, n1, n3); }
}

IntArrayConstructorCall IntArrayConstructorCall() :
{
  // --- JTB generated node declarations ---
  IntType n0 = null;
  ArrayAccess n1 = null;
}
{
  n0 = IntType()
  n1 = ArrayAccess()
  { return new IntArrayConstructorCall(n0, n1); }
}

ExpressionPrime ExpressionPrime() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  BinaryOperator n2 = null;
  Expression n3 = null;
  ExpressionPrime n4 = null;
  NodeSequence n5 = null;
  ArrayAccess n6 = null;
  ExpressionPrime n7 = null;
  NodeSequence n8 = null;
  ArrayLengthAccess n9 = null;
  ExpressionPrime n10 = null;
  NodeSequence n11 = null;
  MethodCall n12 = null;
  ExpressionPrime n13 = null;
  Empty n14 = null;
}
{
  (
    { n1 = new NodeSequence(3); }
    n2 = BinaryOperator()
    { n1.addNode(n2); }
    n3 = Expression()
    { n1.addNode(n3); }
    n4 = ExpressionPrime()
    { n1.addNode(n4); }
    { n0 = new NodeChoice(n1, 0, 5); }
  |
    { n5 = new NodeSequence(2); }
    n6 = ArrayAccess()
    { n5.addNode(n6); }
    n7 = ExpressionPrime()
    { n5.addNode(n7); }
    { n0 = new NodeChoice(n5, 1, 5); }
  |
    LOOKAHEAD( 2 )
    { n8 = new NodeSequence(2); }
    n9 = ArrayLengthAccess()
    { n8.addNode(n9); }
    n10 = ExpressionPrime()
    { n8.addNode(n10); }
    { n0 = new NodeChoice(n8, 2, 5); }
  |
    { n11 = new NodeSequence(2); }
    n12 = MethodCall()
    { n11.addNode(n12); }
    n13 = ExpressionPrime()
    { n11.addNode(n13); }
    { n0 = new NodeChoice(n11, 3, 5); }
  |
    n14 = Empty()
    { n0 = new NodeChoice(n14, 4, 5); }
  )
  { return new ExpressionPrime(n0); }
}

ArrayLengthAccess ArrayLengthAccess() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
}
{
  n1 = < DOT >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < LENGTH_FIELD_NAME >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  { return new ArrayLengthAccess(n0, n2); }
}

MethodCall MethodCall() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = new NodeOptional();
  NodeSequence n6 = null;
  Parameter n7 = null;
  NodeListOptional n8 = null;
  NodeSequence n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  Parameter n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
}
{
  n1 = < DOT >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Identifier()
  n4 = < PARENTHESIS_LEFT >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  (
    { n8 = new NodeListOptional(); }
    { n6 = new NodeSequence(2); }
    n7 = Parameter()
    { n6.addNode(n7); }
    (
      { n9 = new NodeSequence(2); }
      n11 = < COMMA >
      { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12 = Parameter()
      { n9.addNode(n12); }
      { n8.addNode(n9); }
    )*
    { n8.nodes.trimToSize(); }
    { n6.addNode(n8); }
    { n5.addNode(n6); }
  )?
  n14 = < PARENTHESIS_RIGHT >
  { n13 = JTBToolkit.makeNodeToken(n14); }
  { return new MethodCall(n0, n2, n3, n5, n13); }
}

Parameter Parameter() :
{
  // --- JTB generated node declarations ---
  Expression n0 = null;
}
{
  n0 = Expression()
  { return new Parameter(n0); }
}

UnaryOperator UnaryOperator() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < UNARY_OPERATOR >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new UnaryOperator(n0); }
}

BinaryOperator BinaryOperator() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < BINARY_OPERATOR >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new BinaryOperator(n0); }
}

BooleanType BooleanType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < BOOLEAN_TYPE >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new BooleanType(n0); }
}

VoidType VoidType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < VOID_TYPE >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new VoidType(n0); }
}

IntType IntType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < INT_TYPE >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new IntType(n0); }
}

IntArrayType IntArrayType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n1 = < INT_TYPE >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < BRACKET_LEFT >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < BRACKET_RIGHT >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  { return new IntArrayType(n0, n2, n4); }
}

Identifier Identifier() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < IDENTIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new Identifier(n0); }
}

Empty Empty() :
{
  // --- JTB generated node declarations ---
  
}
{
  {}
  { return new Empty(); }
}
