/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(MiniJavaImpl)package ch.unibe.iam.scg.javacc;import ch.unibe.iam.scg.minijava.MiniJava;public class MiniJavaImpl implements MiniJava{}PARSER_END(MiniJavaImpl)SKIP :{  " "| "\r"| "\t"| "\n"}// weird stuff
TOKEN :{  < LENGTH_FIELD_NAME : "length" >| < MAIN_METHOD_NAME : "main" >| < PRINT_METHOD : "System.out.println" >}// operators
TOKEN :{  < UNARY_OPERATOR : "!" >| < BINARY_OPERATOR :    (      "&&"    | ">"    | "+"    | "-"    | "*"    ) >}// separatorsTOKEN :{  < BRACE_LEFT : "{" >| < BRACE_RIGHT : "}" >| < BRACKET_LEFT : "[" >| < BRACKET_RIGHT : "]" >| < PARENTHESIS_LEFT : "(" >| < PARENTHESIS_RIGHT : ")" >| < SEMICOLON : ";" >| < COMMA : "," >| < DOT : "." >| < EQUALS_SIGN : "=" >}// reserved words
TOKEN :{  < CLASS : "class" >| < PUBLIC_MODIFIER : "public" >| < STATIC_MODIFIER : "static" >| < EXTENDS : "extends" >| < RETURN : "return" >| < IF : "if" >| < ELSE : "else" >| < WHILE : "while" >| < NEW : "new" >}// types
TOKEN :{  < VOID_TYPE : "void" >| < STRING_TYPE : "String" >| < INT_TYPE : "int" >| < BOOLEAN_TYPE : "boolean" >}// pseudo-variablesTOKEN :{  < THIS : "this" >}// literals
TOKEN :{  < TRUE : "true" >| < FALSE : "false" >| < INTEGER_LITERAL :    ([ "1"-"9" ]) ([ "0"-"9" ])*  | "0" >}// identifier
TOKEN :{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    | < UNDERSCORE >    )* >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >| < #UNDERSCORE : "_" >}void Goal() :{}{  MainClass()  (    ClassDeclaration()  )*  < EOF >}void MainClass() :{}{  < CLASS > Identifier() < BRACE_LEFT > < PUBLIC_MODIFIER > < STATIC_MODIFIER > < VOID_TYPE > < MAIN_METHOD_NAME > < PARENTHESIS_LEFT > < STRING_TYPE > < BRACKET_LEFT > < BRACKET_RIGHT > Identifier() < PARENTHESIS_RIGHT > < BRACE_LEFT >  (    Statement()  )?  < BRACE_RIGHT > < BRACE_RIGHT >}void ClassDeclaration() :{}{  < CLASS > Identifier()  (    < EXTENDS > Identifier()  )?  < BRACE_LEFT >  (    VarDeclaration()  )*  (    MethodDeclaration()  )*  < BRACE_RIGHT >}void VarDeclaration() :{}{  TypedDeclaration() < SEMICOLON >}void MethodDeclaration() :{}{  < PUBLIC_MODIFIER > TypedDeclaration() < PARENTHESIS_LEFT > ParameterDeclarationList() < PARENTHESIS_RIGHT > < BRACE_LEFT >  (    LOOKAHEAD(2)    VarDeclaration()  )*  (    Statement()  )*  (    < RETURN > Expression() < SEMICOLON >  )?  < BRACE_RIGHT >}void ParameterDeclarationList() :{}{  (    ParameterDeclaration()    (      < COMMA > ParameterDeclaration()    )*  )?}void ParameterDeclaration() :{}{  TypedDeclaration()}void TypedDeclaration() :{}{  Type() Identifier()}void Type() :{}{  LOOKAHEAD(2)  IntArrayType()| IntType()| BooleanType()| VoidType()| Identifier()}void Statement() :{}{  BlockStatement()| IfStatement()| WhileStatement()| PrintStatement()| AssignmentStatement()}void BlockStatement() :{}{  < BRACE_LEFT >  (    Statement()  )*  < BRACE_RIGHT >}void IfStatement() :{}{  < IF > < PARENTHESIS_LEFT > Expression() < PARENTHESIS_RIGHT > Statement() < ELSE > Statement()}void WhileStatement() :{}{  < WHILE > < PARENTHESIS_LEFT > Expression() < PARENTHESIS_RIGHT > Statement()}void PrintStatement() :{}{  < PRINT_METHOD > < PARENTHESIS_LEFT > Expression() < PARENTHESIS_RIGHT > < SEMICOLON >}void AssignmentStatement() :{}{  Assignee() < EQUALS_SIGN > Expression() < SEMICOLON >}void Assignee() :{}{  LOOKAHEAD(2)  AssignableArrayAccess()| Identifier()}void AssignableArrayAccess() :{}{  Identifier() ArrayAccess()}void ArrayAccess() :{}{  < BRACKET_LEFT > Expression() < BRACKET_RIGHT >}void Expression() :{}{  ObjectInstantiationExpression() ExpressionPrime()| UnaryOperator() Expression() ExpressionPrime()| < PARENTHESIS_LEFT > Expression() < PARENTHESIS_RIGHT > ExpressionPrime()| < INTEGER_LITERAL > ExpressionPrime()| < TRUE > ExpressionPrime()| < FALSE > ExpressionPrime()| < THIS > ExpressionPrime()| Identifier() ExpressionPrime()}void ObjectInstantiationExpression() :{}{  < NEW > ConstructorCall()}void ConstructorCall() :{}{  ClassConstructorCall()| IntArrayConstructorCall()}void ClassConstructorCall() :{}{  Identifier() < PARENTHESIS_LEFT > < PARENTHESIS_RIGHT >}void IntArrayConstructorCall() :{}{  IntType() ArrayAccess()}void ExpressionPrime() :{}{  BinaryOperator() Expression() ExpressionPrime()| ArrayAccess() ExpressionPrime()| LOOKAHEAD(2)  ArrayLengthAccess() ExpressionPrime()| MethodCall() ExpressionPrime()| Empty()}void ArrayLengthAccess() :{}{  < DOT > < LENGTH_FIELD_NAME >}void MethodCall() :{}{  < DOT > Identifier() < PARENTHESIS_LEFT > ParameterList() < PARENTHESIS_RIGHT >}void ParameterList() :{}{  (    Parameter()    (      < COMMA > Parameter()    )*  )?}void Parameter() :{}{  Expression()}void UnaryOperator() :{}{  < UNARY_OPERATOR >}void BinaryOperator() :{}{  < BINARY_OPERATOR >}void BooleanType() :{}{  < BOOLEAN_TYPE >}void VoidType() :{}{  < VOID_TYPE >}void IntType() :{}{  < INT_TYPE >}void IntArrayType() :{}{  < INT_TYPE > < BRACKET_LEFT > < BRACKET_RIGHT >}void Identifier() :{}{  < IDENTIFIER >}void Empty() :{}{  {}}
