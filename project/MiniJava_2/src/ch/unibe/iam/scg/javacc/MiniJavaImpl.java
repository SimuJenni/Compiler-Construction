/* Generated By:JavaCC: Do not edit this line. MiniJavaImpl.java */
package ch.unibe.iam.scg.javacc;

import ch.unibe.iam.scg.minijava.MiniJava;
import ch.unibe.iam.scg.javacc.syntaxtree.*;


public class MiniJavaImpl implements MiniJava, MiniJavaImplConstants {

  final public Goal Goal() throws ParseException {
  // --- JTB generated node declarations ---
  MainClass n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  ClassDeclaration n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    n0 = MainClass();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n2 = ClassDeclaration();
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    n4 = jj_consume_token(0);
    n4.beginColumn++;
    n4.endColumn++;
    { n3 = JTBToolkit.makeNodeToken(n4); }
    {if (true) return new Goal(n0, n1, n3);}
    throw new Error("Missing return statement in function");
  }

  final public MainClass MainClass() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  Identifier n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  NodeOptional n26 = new NodeOptional();
  Statement n27 = null;
  NodeToken n28 = null;
  Token n29 = null;
  NodeToken n30 = null;
  Token n31 = null;
    n1 = jj_consume_token(CLASS);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(BRACE_LEFT);
    n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(PUBLIC_MODIFIER);
    n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(STATIC_MODIFIER);
    n7 = JTBToolkit.makeNodeToken(n8);
    n10 = jj_consume_token(VOID_TYPE);
    n9 = JTBToolkit.makeNodeToken(n10);
    n12 = jj_consume_token(MAIN_METHOD_NAME);
    n11 = JTBToolkit.makeNodeToken(n12);
    n14 = jj_consume_token(PARENTHESIS_LEFT);
    n13 = JTBToolkit.makeNodeToken(n14);
    n16 = jj_consume_token(STRING_TYPE);
    n15 = JTBToolkit.makeNodeToken(n16);
    n18 = jj_consume_token(BRACKET_LEFT);
    n17 = JTBToolkit.makeNodeToken(n18);
    n20 = jj_consume_token(BRACKET_RIGHT);
    n19 = JTBToolkit.makeNodeToken(n20);
    n21 = Identifier();
    n23 = jj_consume_token(PARENTHESIS_RIGHT);
    n22 = JTBToolkit.makeNodeToken(n23);
    n25 = jj_consume_token(BRACE_LEFT);
    n24 = JTBToolkit.makeNodeToken(n25);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRINT_METHOD:
    case BRACE_LEFT:
    case IF:
    case WHILE:
    case IDENTIFIER:
      n27 = Statement();
      n26.addNode(n27);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    n29 = jj_consume_token(BRACE_RIGHT);
    n28 = JTBToolkit.makeNodeToken(n29);
    n31 = jj_consume_token(BRACE_RIGHT);
    n30 = JTBToolkit.makeNodeToken(n31);
    {if (true) return new MainClass(n0, n2, n3, n5, n7, n9, n11, n13, n15, n17, n19, n21, n22, n24, n26, n28, n30);}
    throw new Error("Missing return statement in function");
  }

  final public ClassDeclaration ClassDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Identifier n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeListOptional n10 = new NodeListOptional();
  VarDeclaration n11 = null;
  NodeListOptional n12 = new NodeListOptional();
  MethodDeclaration n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
    n1 = jj_consume_token(CLASS);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      n4 = new NodeSequence(2);
      n6 = jj_consume_token(EXTENDS);
      n5 = JTBToolkit.makeNodeToken(n6);
      n4.addNode(n5);
      n7 = Identifier();
      n4.addNode(n7);
      n3.addNode(n4);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    n9 = jj_consume_token(BRACE_LEFT);
    n8 = JTBToolkit.makeNodeToken(n9);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID_TYPE:
      case INT_TYPE:
      case BOOLEAN_TYPE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      n11 = VarDeclaration();
      n10.addNode(n11);
    }
    n10.nodes.trimToSize();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC_MODIFIER:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      n13 = MethodDeclaration();
      n12.addNode(n13);
    }
    n12.nodes.trimToSize();
    n15 = jj_consume_token(BRACE_RIGHT);
    n14 = JTBToolkit.makeNodeToken(n15);
    {if (true) return new ClassDeclaration(n0, n2, n3, n8, n10, n12, n14);}
    throw new Error("Missing return statement in function");
  }

  final public VarDeclaration VarDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  TypedDeclaration n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
    n0 = TypedDeclaration();
    n2 = jj_consume_token(SEMICOLON);
    n1 = JTBToolkit.makeNodeToken(n2);
    {if (true) return new VarDeclaration(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public MethodDeclaration MethodDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  TypedDeclaration n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  ParameterDeclarationList n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeListOptional n10 = new NodeListOptional();
  VarDeclaration n11 = null;
  NodeListOptional n12 = new NodeListOptional();
  Statement n13 = null;
  NodeOptional n14 = new NodeOptional();
  NodeSequence n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  Expression n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
    n1 = jj_consume_token(PUBLIC_MODIFIER);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = TypedDeclaration();
    n4 = jj_consume_token(PARENTHESIS_LEFT);
    n3 = JTBToolkit.makeNodeToken(n4);
    n5 = ParameterDeclarationList();
    n7 = jj_consume_token(PARENTHESIS_RIGHT);
    n6 = JTBToolkit.makeNodeToken(n7);
    n9 = jj_consume_token(BRACE_LEFT);
    n8 = JTBToolkit.makeNodeToken(n9);
    label_4:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_4;
      }
      n11 = VarDeclaration();
      n10.addNode(n11);
    }
    n10.nodes.trimToSize();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT_METHOD:
      case BRACE_LEFT:
      case IF:
      case WHILE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      n13 = Statement();
      n12.addNode(n13);
    }
    n12.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RETURN:
      n15 = new NodeSequence(3);
      n17 = jj_consume_token(RETURN);
      n16 = JTBToolkit.makeNodeToken(n17);
      n15.addNode(n16);
      n18 = Expression();
      n15.addNode(n18);
      n20 = jj_consume_token(SEMICOLON);
      n19 = JTBToolkit.makeNodeToken(n20);
      n15.addNode(n19);
      n14.addNode(n15);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    n22 = jj_consume_token(BRACE_RIGHT);
    n21 = JTBToolkit.makeNodeToken(n22);
    {if (true) return new MethodDeclaration(n0, n2, n3, n5, n6, n8, n10, n12, n14, n21);}
    throw new Error("Missing return statement in function");
  }

  final public ParameterDeclarationList ParameterDeclarationList() throws ParseException {
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  ParameterDeclaration n2 = null;
  NodeListOptional n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  ParameterDeclaration n7 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID_TYPE:
    case INT_TYPE:
    case BOOLEAN_TYPE:
    case IDENTIFIER:
      n3 = new NodeListOptional();
      n1 = new NodeSequence(2);
      n2 = ParameterDeclaration();
      n1.addNode(n2);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_6;
        }
        n4 = new NodeSequence(2);
        n6 = jj_consume_token(COMMA);
        n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
        n7 = ParameterDeclaration();
        n4.addNode(n7);
        n3.addNode(n4);
      }
      n3.nodes.trimToSize();
      n1.addNode(n3);
      n0.addNode(n1);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    {if (true) return new ParameterDeclarationList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ParameterDeclaration ParameterDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  TypedDeclaration n0 = null;
    n0 = TypedDeclaration();
    {if (true) return new ParameterDeclaration(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TypedDeclaration TypedDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  Type n0 = null;
  Identifier n1 = null;
    n0 = Type();
    n1 = Identifier();
    {if (true) return new TypedDeclaration(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public Type Type() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  IntArrayType n1 = null;
  IntType n2 = null;
  BooleanType n3 = null;
  VoidType n4 = null;
  Identifier n5 = null;
    if (jj_2_2(2)) {
      n1 = IntArrayType();
      n0 = new NodeChoice(n1, 0, 5);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_TYPE:
        n2 = IntType();
      n0 = new NodeChoice(n2, 1, 5);
        break;
      case BOOLEAN_TYPE:
        n3 = BooleanType();
      n0 = new NodeChoice(n3, 2, 5);
        break;
      case VOID_TYPE:
        n4 = VoidType();
      n0 = new NodeChoice(n4, 3, 5);
        break;
      case IDENTIFIER:
        n5 = Identifier();
      n0 = new NodeChoice(n5, 4, 5);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new Type(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Statement Statement() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  BlockStatement n1 = null;
  IfStatement n2 = null;
  WhileStatement n3 = null;
  PrintStatement n4 = null;
  AssignmentStatement n5 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BRACE_LEFT:
      n1 = BlockStatement();
      n0 = new NodeChoice(n1, 0, 5);
      break;
    case IF:
      n2 = IfStatement();
      n0 = new NodeChoice(n2, 1, 5);
      break;
    case WHILE:
      n3 = WhileStatement();
      n0 = new NodeChoice(n3, 2, 5);
      break;
    case PRINT_METHOD:
      n4 = PrintStatement();
      n0 = new NodeChoice(n4, 3, 5);
      break;
    case IDENTIFIER:
      n5 = AssignmentStatement();
      n0 = new NodeChoice(n5, 4, 5);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Statement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public BlockStatement BlockStatement() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  Statement n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(BRACE_LEFT);
    n0 = JTBToolkit.makeNodeToken(n1);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT_METHOD:
      case BRACE_LEFT:
      case IF:
      case WHILE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_7;
      }
      n3 = Statement();
      n2.addNode(n3);
    }
    n2.nodes.trimToSize();
    n5 = jj_consume_token(BRACE_RIGHT);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new BlockStatement(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  final public IfStatement IfStatement() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Statement n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  Statement n10 = null;
    n1 = jj_consume_token(IF);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_LEFT);
    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(PARENTHESIS_RIGHT);
    n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Statement();
    n9 = jj_consume_token(ELSE);
    n8 = JTBToolkit.makeNodeToken(n9);
    n10 = Statement();
    {if (true) return new IfStatement(n0, n2, n4, n5, n7, n8, n10);}
    throw new Error("Missing return statement in function");
  }

  final public WhileStatement WhileStatement() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Statement n7 = null;
    n1 = jj_consume_token(WHILE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_LEFT);
    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(PARENTHESIS_RIGHT);
    n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Statement();
    {if (true) return new WhileStatement(n0, n2, n4, n5, n7);}
    throw new Error("Missing return statement in function");
  }

  final public PrintStatement PrintStatement() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
    n1 = jj_consume_token(PRINT_METHOD);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_LEFT);
    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(PARENTHESIS_RIGHT);
    n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(SEMICOLON);
    n7 = JTBToolkit.makeNodeToken(n8);
    {if (true) return new PrintStatement(n0, n2, n4, n5, n7);}
    throw new Error("Missing return statement in function");
  }

  final public AssignmentStatement AssignmentStatement() throws ParseException {
  // --- JTB generated node declarations ---
  Assignee n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  Expression n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n0 = Assignee();
    n2 = jj_consume_token(EQUALS_SIGN);
    n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Expression();
    n5 = jj_consume_token(SEMICOLON);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new AssignmentStatement(n0, n1, n3, n4);}
    throw new Error("Missing return statement in function");
  }

  final public Assignee Assignee() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  AssignableArrayAccess n1 = null;
  Identifier n2 = null;
    if (jj_2_3(2)) {
      n1 = AssignableArrayAccess();
      n0 = new NodeChoice(n1, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        n2 = Identifier();
      n0 = new NodeChoice(n2, 1, 2);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new Assignee(n0);}
    throw new Error("Missing return statement in function");
  }

  final public AssignableArrayAccess AssignableArrayAccess() throws ParseException {
  // --- JTB generated node declarations ---
  Identifier n0 = null;
  ArrayAccess n1 = null;
    n0 = Identifier();
    n1 = ArrayAccess();
    {if (true) return new AssignableArrayAccess(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayAccess ArrayAccess() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Expression n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    n1 = jj_consume_token(BRACKET_LEFT);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n4 = jj_consume_token(BRACKET_RIGHT);
    n3 = JTBToolkit.makeNodeToken(n4);
    {if (true) return new ArrayAccess(n0, n2, n3);}
    throw new Error("Missing return statement in function");
  }

  final public Expression Expression() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  ObjectInstantiationExpression n2 = null;
  ExpressionPrime n3 = null;
  NodeSequence n4 = null;
  UnaryOperator n5 = null;
  Expression n6 = null;
  ExpressionPrime n7 = null;
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  Expression n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  ExpressionPrime n14 = null;
  NodeSequence n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  ExpressionPrime n18 = null;
  NodeSequence n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  ExpressionPrime n22 = null;
  NodeSequence n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  ExpressionPrime n26 = null;
  NodeSequence n27 = null;
  NodeToken n28 = null;
  Token n29 = null;
  ExpressionPrime n30 = null;
  NodeSequence n31 = null;
  Identifier n32 = null;
  ExpressionPrime n33 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
      n1 = new NodeSequence(2);
      n2 = ObjectInstantiationExpression();
      n1.addNode(n2);
      n3 = ExpressionPrime();
      n1.addNode(n3);
      n0 = new NodeChoice(n1, 0, 8);
      break;
    case UNARY_OPERATOR:
      n4 = new NodeSequence(3);
      n5 = UnaryOperator();
      n4.addNode(n5);
      n6 = Expression();
      n4.addNode(n6);
      n7 = ExpressionPrime();
      n4.addNode(n7);
      n0 = new NodeChoice(n4, 1, 8);
      break;
    case PARENTHESIS_LEFT:
      n8 = new NodeSequence(4);
      n10 = jj_consume_token(PARENTHESIS_LEFT);
      n9 = JTBToolkit.makeNodeToken(n10);
      n8.addNode(n9);
      n11 = Expression();
      n8.addNode(n11);
      n13 = jj_consume_token(PARENTHESIS_RIGHT);
      n12 = JTBToolkit.makeNodeToken(n13);
      n8.addNode(n12);
      n14 = ExpressionPrime();
      n8.addNode(n14);
      n0 = new NodeChoice(n8, 2, 8);
      break;
    case INTEGER_LITERAL:
      n15 = new NodeSequence(2);
      n17 = jj_consume_token(INTEGER_LITERAL);
      n16 = JTBToolkit.makeNodeToken(n17);
      n15.addNode(n16);
      n18 = ExpressionPrime();
      n15.addNode(n18);
      n0 = new NodeChoice(n15, 3, 8);
      break;
    case TRUE:
      n19 = new NodeSequence(2);
      n21 = jj_consume_token(TRUE);
      n20 = JTBToolkit.makeNodeToken(n21);
      n19.addNode(n20);
      n22 = ExpressionPrime();
      n19.addNode(n22);
      n0 = new NodeChoice(n19, 4, 8);
      break;
    case FALSE:
      n23 = new NodeSequence(2);
      n25 = jj_consume_token(FALSE);
      n24 = JTBToolkit.makeNodeToken(n25);
      n23.addNode(n24);
      n26 = ExpressionPrime();
      n23.addNode(n26);
      n0 = new NodeChoice(n23, 5, 8);
      break;
    case THIS:
      n27 = new NodeSequence(2);
      n29 = jj_consume_token(THIS);
      n28 = JTBToolkit.makeNodeToken(n29);
      n27.addNode(n28);
      n30 = ExpressionPrime();
      n27.addNode(n30);
      n0 = new NodeChoice(n27, 6, 8);
      break;
    case IDENTIFIER:
      n31 = new NodeSequence(2);
      n32 = Identifier();
      n31.addNode(n32);
      n33 = ExpressionPrime();
      n31.addNode(n33);
      n0 = new NodeChoice(n31, 7, 8);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Expression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ObjectInstantiationExpression ObjectInstantiationExpression() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ConstructorCall n2 = null;
    n1 = jj_consume_token(NEW);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ConstructorCall();
    {if (true) return new ObjectInstantiationExpression(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public ConstructorCall ConstructorCall() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  ClassConstructorCall n1 = null;
  IntArrayConstructorCall n2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n1 = ClassConstructorCall();
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case INT_TYPE:
      n2 = IntArrayConstructorCall();
      n0 = new NodeChoice(n2, 1, 2);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new ConstructorCall(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ClassConstructorCall ClassConstructorCall() throws ParseException {
  // --- JTB generated node declarations ---
  Identifier n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    n0 = Identifier();
    n2 = jj_consume_token(PARENTHESIS_LEFT);
    n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(PARENTHESIS_RIGHT);
    n3 = JTBToolkit.makeNodeToken(n4);
    {if (true) return new ClassConstructorCall(n0, n1, n3);}
    throw new Error("Missing return statement in function");
  }

  final public IntArrayConstructorCall IntArrayConstructorCall() throws ParseException {
  // --- JTB generated node declarations ---
  IntType n0 = null;
  ArrayAccess n1 = null;
    n0 = IntType();
    n1 = ArrayAccess();
    {if (true) return new IntArrayConstructorCall(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionPrime ExpressionPrime() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  BinaryOperator n2 = null;
  Expression n3 = null;
  ExpressionPrime n4 = null;
  NodeSequence n5 = null;
  ArrayAccess n6 = null;
  ExpressionPrime n7 = null;
  NodeSequence n8 = null;
  ArrayLengthAccess n9 = null;
  ExpressionPrime n10 = null;
  NodeSequence n11 = null;
  MethodCall n12 = null;
  ExpressionPrime n13 = null;
  Empty n14 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BINARY_OPERATOR:
      n1 = new NodeSequence(3);
      n2 = BinaryOperator();
      n1.addNode(n2);
      n3 = Expression();
      n1.addNode(n3);
      n4 = ExpressionPrime();
      n1.addNode(n4);
      n0 = new NodeChoice(n1, 0, 5);
      break;
    case BRACKET_LEFT:
      n5 = new NodeSequence(2);
      n6 = ArrayAccess();
      n5.addNode(n6);
      n7 = ExpressionPrime();
      n5.addNode(n7);
      n0 = new NodeChoice(n5, 1, 5);
      break;
    default:
      jj_la1[15] = jj_gen;
      if (jj_2_4(2)) {
      n8 = new NodeSequence(2);
        n9 = ArrayLengthAccess();
      n8.addNode(n9);
        n10 = ExpressionPrime();
      n8.addNode(n10);
      n0 = new NodeChoice(n8, 2, 5);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
      n11 = new NodeSequence(2);
          n12 = MethodCall();
      n11.addNode(n12);
          n13 = ExpressionPrime();
      n11.addNode(n13);
      n0 = new NodeChoice(n11, 3, 5);
          break;
        default:
          jj_la1[16] = jj_gen;
          n14 = Empty();
      n0 = new NodeChoice(n14, 4, 5);
        }
      }
    }
    {if (true) return new ExpressionPrime(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayLengthAccess ArrayLengthAccess() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
    n1 = jj_consume_token(DOT);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LENGTH_FIELD_NAME);
    n2 = JTBToolkit.makeNodeToken(n3);
    {if (true) return new ArrayLengthAccess(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public MethodCall MethodCall() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  ParameterList n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
    n1 = jj_consume_token(DOT);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(PARENTHESIS_LEFT);
    n3 = JTBToolkit.makeNodeToken(n4);
    n5 = ParameterList();
    n7 = jj_consume_token(PARENTHESIS_RIGHT);
    n6 = JTBToolkit.makeNodeToken(n7);
    {if (true) return new MethodCall(n0, n2, n3, n5, n6);}
    throw new Error("Missing return statement in function");
  }

  final public ParameterList ParameterList() throws ParseException {
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeSequence n1 = null;
  Parameter n2 = null;
  NodeListOptional n3 = null;
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Parameter n7 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNARY_OPERATOR:
    case PARENTHESIS_LEFT:
    case NEW:
    case THIS:
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
    case IDENTIFIER:
      n3 = new NodeListOptional();
      n1 = new NodeSequence(2);
      n2 = Parameter();
      n1.addNode(n2);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_8;
        }
        n4 = new NodeSequence(2);
        n6 = jj_consume_token(COMMA);
        n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
        n7 = Parameter();
        n4.addNode(n7);
        n3.addNode(n4);
      }
      n3.nodes.trimToSize();
      n1.addNode(n3);
      n0.addNode(n1);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    {if (true) return new ParameterList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Parameter Parameter() throws ParseException {
  // --- JTB generated node declarations ---
  Expression n0 = null;
    n0 = Expression();
    {if (true) return new Parameter(n0);}
    throw new Error("Missing return statement in function");
  }

  final public UnaryOperator UnaryOperator() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
    n1 = jj_consume_token(UNARY_OPERATOR);
    n0 = JTBToolkit.makeNodeToken(n1);
    {if (true) return new UnaryOperator(n0);}
    throw new Error("Missing return statement in function");
  }

  final public BinaryOperator BinaryOperator() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
    n1 = jj_consume_token(BINARY_OPERATOR);
    n0 = JTBToolkit.makeNodeToken(n1);
    {if (true) return new BinaryOperator(n0);}
    throw new Error("Missing return statement in function");
  }

  final public BooleanType BooleanType() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
    n1 = jj_consume_token(BOOLEAN_TYPE);
    n0 = JTBToolkit.makeNodeToken(n1);
    {if (true) return new BooleanType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public VoidType VoidType() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
    n1 = jj_consume_token(VOID_TYPE);
    n0 = JTBToolkit.makeNodeToken(n1);
    {if (true) return new VoidType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public IntType IntType() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
    n1 = jj_consume_token(INT_TYPE);
    n0 = JTBToolkit.makeNodeToken(n1);
    {if (true) return new IntType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public IntArrayType IntArrayType() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(INT_TYPE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(BRACKET_LEFT);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(BRACKET_RIGHT);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new IntArrayType(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  final public Identifier Identifier() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
    n1 = jj_consume_token(IDENTIFIER);
    n0 = JTBToolkit.makeNodeToken(n1);
    {if (true) return new Identifier(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Empty Empty() throws ParseException {

    {if (true) return new Empty();}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH_FIELD_NAME)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_16()) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(INT_TYPE)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(BRACKET_LEFT)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(VOID_TYPE)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_14()) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(BOOLEAN_TYPE)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(INT_TYPE)) return true;
    if (jj_scan_token(BRACKET_LEFT)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_11()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MiniJavaImplTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100000,0xa000480,0x800000,0xa0000000,0x200000,0xa000480,0x1000000,0x20000,0xa0000000,0xa0000000,0xa000480,0xa000480,0x0,0x10004100,0x80000000,0x1200,0x40000,0x20000,0x10004100,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x20,0x0,0x21,0x0,0x20,0x0,0x0,0x21,0x21,0x20,0x20,0x20,0x3e,0x20,0x0,0x0,0x0,0x3e,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJavaImpl(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJavaImpl(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJavaImplTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJavaImpl(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniJavaImplTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJavaImpl(MiniJavaImplTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaImplTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                                               }

class JTBToolkit {

  static NodeToken makeNodeToken(final Token tok) {
    final NodeToken node = new NodeToken(tok.image.intern(), tok.kind, tok.beginLine, tok.beginColumn, tok.endLine, tok.endColumn);
    if (tok.specialToken == null)
      return node;
    Token t = tok;
    int nbt = 0;
    while (t.specialToken != null) {
      t = t.specialToken;
      nbt++;
    }
    final java.util.ArrayList<NodeToken> temp = new java.util.ArrayList<NodeToken>(nbt);
    t = tok;
    while (t.specialToken != null) {
      t = t.specialToken;
      temp.add(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
    }
    for (int i = nbt - 1; i >= 0; --i)
      node.addSpecial(temp.get(i));
    // node.trimSpecials();
    return node;
  }
}
