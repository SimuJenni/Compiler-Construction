/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  LOOKAHEAD= 2;  static = false;}PARSER_BEGIN(MiniJavaImpl)package ch.unibe.iam.scg.javacc;import ch.unibe.iam.scg.minijava.MiniJava;public class MiniJavaImpl implements MiniJava{}PARSER_END(MiniJavaImpl)SKIP :{  " "| "\r"| "\t"| "\n"}// weird stuff
TOKEN :{  < LENGTH_FIELD_NAME : "length" >| < MAIN_METHOD_NAME : "main" >| < PRINT_METHOD : "System.out.println" >}// operators
TOKEN :{  < UNARY_OPERATOR : "!" >| < BINARY_OPERATOR :    (      "&&"    | "<"    | "+"    | "-"    | "*"    ) >}// separatorsTOKEN :{  < BRACE_LEFT : "{" >| < BRACE_RIGHT : "}" >| < BRACKET_LEFT : "[" >| < BRACKET_RIGHT : "]" >| < PARENTHESIS_LEFT : "(" >| < PARENTHESIS_RIGHT : ")" >| < SEMICOLON : ";" >| < COMMA : "," >| < DOT : "." >}// reserved words
TOKEN :{  < CLASS : "class" >| < PUBLIC_MODIFIER : "public" >| < STATIC_MODIFIER : "static" >| < EXTENDS : "extends" >| < RETURN : "return" >| < IF : "if" >| < ELSE : "else" >| < WHILE : "while" >| < NEW : "new" >}// types
TOKEN :{  < VOID_TYPE : "void" >| < STRING_TYPE : "String" >| < INT_TYPE : "int" >| < BOOLEAN_TYPE : "boolean" >}// pseudo-variablesTOKEN :{  < THIS : "this" >}// literals
TOKEN :{  < TRUE : "true" >| < FALSE : "false" >| < INTEGER_LITERAL : ([ "1"-"9" ]) ([ "0"-"9" ])+ >}// identifier
TOKEN :{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}void Goal() :{}{  MainClass()  (    ClassDeclaration()  )*  < EOF >}void MainClass() :{}{  < CLASS > Identifier() < BRACE_LEFT > < PUBLIC_MODIFIER > < STATIC_MODIFIER > < VOID_TYPE > < MAIN_METHOD_NAME > < PARENTHESIS_LEFT > < STRING_TYPE > < BRACKET_LEFT > < BRACKET_RIGHT > Identifier() < PARENTHESIS_RIGHT > < BRACE_LEFT > Statement() < BRACE_RIGHT > < BRACE_RIGHT >}void ClassDeclaration() :{}{  < CLASS > Identifier()  (    < EXTENDS > Identifier()  )?  < BRACE_LEFT >  (    VarDeclaration()  )*  (    MethodDeclaration()  )*  < BRACE_RIGHT >}void VarDeclaration() :{}{  Type() Identifier() < SEMICOLON >}void MethodDeclaration() :{}{  < PUBLIC_MODIFIER > Type() Identifier() < PARENTHESIS_LEFT >  (    Type() Identifier()    (      < COMMA > Type() Identifier()    )*  )?  < PARENTHESIS_RIGHT > < BRACE_LEFT >  (    VarDeclaration()  )*  (    Statement()  )*  < RETURN > Expression() < SEMICOLON > < BRACE_RIGHT >}void Type() :{}{  < INT_TYPE > < BRACKET_LEFT > < BRACKET_RIGHT >| < BOOLEAN_TYPE >| < INT_TYPE >| Identifier()}void Statement() :{}{  < BRACE_LEFT >  (    Statement()  )*  < BRACE_RIGHT >| < IF > < PARENTHESIS_LEFT > Expression() < PARENTHESIS_RIGHT > Statement() < ELSE > Statement()| < WHILE > < PARENTHESIS_LEFT > Expression() < PARENTHESIS_RIGHT > Statement()| < PRINT_METHOD > < PARENTHESIS_LEFT > Expression() < PARENTHESIS_RIGHT > < SEMICOLON >| Identifier() "=" Expression() < SEMICOLON >| Identifier() < BRACKET_LEFT > Expression() < BRACKET_RIGHT > "=" Expression() < SEMICOLON >}void Expression() :{}{  ExpressionPrime() < INTEGER_LITERAL >| ExpressionPrime() < TRUE >| ExpressionPrime() < FALSE >| ExpressionPrime() Identifier()| ExpressionPrime() < THIS >| ExpressionPrime() < NEW > < INT_TYPE > < BRACKET_LEFT > Expression() < BRACKET_RIGHT >| ExpressionPrime() < NEW > Identifier() < PARENTHESIS_LEFT > < PARENTHESIS_RIGHT >| ExpressionPrime() < UNARY_OPERATOR > Expression()| ExpressionPrime() < PARENTHESIS_LEFT > Expression() < PARENTHESIS_RIGHT >}void ExpressionPrime() :{} {  < BINARY_OPERATOR > Expression() ExpressionPrime()| < BRACKET_LEFT > Expression() < BRACKET_RIGHT > ExpressionPrime()| < DOT > < LENGTH_FIELD_NAME > ExpressionPrime()| < DOT > Identifier() < PARENTHESIS_LEFT >  (    Expression()    (      < COMMA > Expression()    )*  )?  < PARENTHESIS_RIGHT > ExpressionPrime()| Empty()}void Empty() :{} {  {}}void Identifier() :{}{  < IDENTIFIER >}
