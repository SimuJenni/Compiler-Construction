/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  LOOKAHEAD = 2;  static = false;}PARSER_BEGIN(MiniJavaImpl)package ch.unibe.iam.scg.javacc;import ch.unibe.iam.scg.minijava.MiniJava;public class MiniJavaImpl implements MiniJava{}PARSER_END(MiniJavaImpl)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN :{  < CLASS : "class" >| < PUBLIC_MODIFIER : "public" >| < STATIC_MODIFIER : "static" >| < VOID_TYPE : "void" >| < MAIN_METHOD_NAME : "main" >| < STRING_TYPE : "String" >| < EXTENDS : "extends" >| < RETURN : "return" >| < INT_TYPE : "int" >| < BOOLEAN_TYPE : "boolean" >| < IF : "if" >| < WHILE : "while" >| < PRINT_METHOD : "System.out.println" >| < TRUE : "true" >| < FALSE : "false" >| < THIS : "this" >| < NEW : "new" >| < LENGTH_FIELD_NAME : "length" >| < INTEGER_LITERAL : ([ "1"-"9" ]) ([ "0"-"9" ])+ >| < IDENTIFIER : ([ "A"-"Z", "a"-"z" ])+ >}void Goal() :{}{  MainClass()  (    ClassDeclaration()  )*  < EOF >}void MainClass() :{}{  < CLASS > Identifier() "{" < PUBLIC_MODIFIER > < STATIC_MODIFIER > < VOID_TYPE > < MAIN_METHOD_NAME > "(" < STRING_TYPE > "[" "]" Identifier() ")" "{" Statement() "}" "}"}void ClassDeclaration() :{}{  < CLASS > Identifier()  (    < EXTENDS > Identifier()  )?  "{"  (    VarDeclaration()  )*  (    MethodDeclaration()  )*  "}"}void VarDeclaration() :{}{  Type() Identifier() ";"}void MethodDeclaration() :{}{  < PUBLIC_MODIFIER > Type() Identifier() "("  (    Type() Identifier()    (      "," Type() Identifier()    )*  )?  ")" "{"  (    VarDeclaration()  )*  (    Statement()  )*  < RETURN > Expression() ";" "}"}void Type() :{}{  < INT_TYPE > "[" "]"| < BOOLEAN_TYPE >| < INT_TYPE >| Identifier()}void Statement() :{}{  "{"  (    Statement()  )*  "}"| < IF > "(" Expression() ")" Statement() "else" Statement()| < WHILE > "(" Expression() ")" Statement()| < PRINT_METHOD > "(" Expression() ")" ";"| Identifier() "=" Expression() ";"| Identifier() "[" Expression() "]" "=" Expression() ";"}void Expression() :{}{  ExpressionPrime() < INTEGER_LITERAL >| ExpressionPrime() < TRUE >| ExpressionPrime() < FALSE >| ExpressionPrime() Identifier()| ExpressionPrime() < THIS >| ExpressionPrime() < NEW > < INT_TYPE > "[" Expression() "]"| ExpressionPrime() < NEW > Identifier() "(" ")"| ExpressionPrime() "!" Expression()| ExpressionPrime() "(" Expression() ")"}void ExpressionPrime() :{}{  (    "&&"  | "<"  | "+"  | "-"  | "*"  )  Expression() ExpressionPrime()| "[" Expression() "]" ExpressionPrime()| "." < LENGTH_FIELD_NAME >| "." Identifier() "("  (    Expression()    (      "," Expression()    )*  )?  ")" ExpressionPrime()| Empty()}void Empty() :{}{  {}}void Identifier() :{}{  < IDENTIFIER >}
