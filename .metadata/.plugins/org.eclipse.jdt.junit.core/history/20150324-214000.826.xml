<?xml version="1.0" encoding="UTF-8"?><testrun name="SyntaxTest" project="MiniJava_1" tests="48" started="48" failures="0" errors="1" ignored="0">
  <testsuite name="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.002">
    <testcase name="testExpression10" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testExpression11" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testExpression12" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testExpression13" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testExpression14" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testExpression15" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testExpression16" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testExpression17" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testExpression18" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testExpression19" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testExpression20" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testExpression21" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testExpression22" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.001"/>
    <testcase name="testExpression23" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testExpression24" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testExpression25" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testVarDeclaration" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testVarDeclaration2" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testMethodDeclaration" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testId2" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testId3" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testId4" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testStatement" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testType2" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testType3" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testWhile" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testType" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testStatement2" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testArrayAssignment" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testId" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testIf" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testClassDeclaration2" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testExpression2" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testExpression3" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testExpression4" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testExpression5" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testExpression6" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testExpression7" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testExpression8" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testExpression9" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testProgram1" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testProgram2" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testProgram3" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testClassDeclaration" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="test" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.001">
      <error>ch.unibe.iam.scg.javacc.ParseException: Encountered " "}" "} "" at line 1, column 57.
Was expecting one of:
    "System.out.println" ...
    "{" ...
    "if" ...
    "while" ...
    &lt;IDENTIFIER&gt; ...
    &lt;IDENTIFIER&gt; ...
    
	at ch.unibe.iam.scg.javacc.MiniJavaImpl.generateParseException(MiniJavaImpl.java:1277)
	at ch.unibe.iam.scg.javacc.MiniJavaImpl.jj_consume_token(MiniJavaImpl.java:1159)
	at ch.unibe.iam.scg.javacc.MiniJavaImpl.Statement(MiniJavaImpl.java:580)
	at ch.unibe.iam.scg.javacc.MiniJavaImpl.MainClass(MiniJavaImpl.java:99)
	at ch.unibe.iam.scg.javacc.MiniJavaImpl.Goal(MiniJavaImpl.java:17)
	at ch.unibe.iam.scg.javacc.MiniJavaImpl.Goal(MiniJavaImpl.java:1)
	at ch.unibe.iam.scg.minijava.SyntaxTest.test(SyntaxTest.java:36)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)

</error>
    </testcase>
    <testcase name="testAssignment" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testSysout" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
    <testcase name="testExpression" classname="ch.unibe.iam.scg.minijava.SyntaxTest" time="0.0"/>
  </testsuite>
</testrun>
